
/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean \nFailsafe: false \nDescription: Enables writing to flash memory for all added variables. \nNote: This value is recommended to be enabled on most firmwares, but is left configurable for firmwares that may have issues with NVRAM variable storage garbage collection or alike."; ObjectID = "0qd-Qe-41F"; */
"0qd-Qe-41F.ibShadowedToolTip" = "Type: plist boolean \nFailsafe: false \nDescription: Enables writing to flash memory for all added variables. \nNote: This value is recommended to be enabled on most firmwares, but is left configurable for firmwares that may have issues with NVRAM variable storage garbage collection or alike.";

/* Class = "NSTableColumn"; headerCell.title = "Key"; ObjectID = "1Hp-YT-QB3"; */
"1Hp-YT-QB3.headerCell.title" = "Key";

/* Class = "NSMenuItem"; title = "STRING"; ObjectID = "2GE-aT-481"; */
"2GE-aT-481.title" = "STRING";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Enables loading of NVRAM variable file named nvram.plist from EFI volume root.\nThis file must have root plist dictionary type and contain two fields:\n• Version — plist integer, file version, must be set to 1.\n• Add — plist dictionary, equivalent to Add from config.plist.\nVariable loading happens prior to Block (and Add) phases. Unless LegacyOverwrite is enabled, it overwrite any existing variable. Variables allowed to be set must be specified in LegacySchema. Third-party scripts may be used to create nvram.plist file. An example of such script can be found in Utilities. The use of third-party scripts may require ExposeSensitiveData set to 0x3 to provide boot-path variable with OpenCore EFI partition UUID.\n\nWARNING: This feature is very dangerous as it passes unprotected data to your firmware variable services. Use it only when no hardware NVRAM implementation is provided by the firmware or it is incompatible."; ObjectID = "2KJ-kg-wip"; */
"2KJ-kg-wip.ibShadowedToolTip" = "Type: plist boolean\nFailsafe: false\nDescription: Enables loading of NVRAM variable file named nvram.plist from EFI volume root.\nThis file must have root plist dictionary type and contain two fields:\n• Version — plist integer, file version, must be set to 1.\n• Add — plist dictionary, equivalent to Add from config.plist.\nVariable loading happens prior to Block (and Add) phases. Unless LegacyOverwrite is enabled, it overwrite any existing variable. Variables allowed to be set must be specified in LegacySchema. Third-party scripts may be used to create nvram.plist file. An example of such script can be found in Utilities. The use of third-party scripts may require ExposeSensitiveData set to 0x3 to provide boot-path variable with OpenCore EFI partition UUID.\n\nWARNING: This feature is very dangerous as it passes unprotected data to your firmware variable services. Use it only when no hardware NVRAM implementation is provided by the firmware or it is incompatible.";

/* Class = "NSMenuItem"; title = "DATA"; ObjectID = "5S9-qs-ueO"; */
"5S9-qs-ueO.title" = "DATA";

/* Class = "NSButton"; ibShadowedToolTip = "Type: plist boolean\nFailsafe: false\nDescription: Permits overwriting firmware variables from nvram.plist.\nNote: Only variables accessible from the operating system will be overwritten."; ObjectID = "Bqu-cW-189"; */
"Bqu-cW-189.ibShadowedToolTip" = "Type: plist boolean\nFailsafe: false\nDescription: Permits overwriting firmware variables from nvram.plist.\nNote: Only variables accessible from the operating system will be overwritten.";

/* Class = "NSMenuItem"; title = "NUMBER"; ObjectID = "C9A-DN-Ig8"; */
"C9A-DN-Ig8.title" = "NUMBER";

/* Class = "NSTableColumn"; headerCell.title = "Value"; ObjectID = "Eac-Nq-33R"; */
"Eac-Nq-33R.headerCell.title" = "Value";

/* Class = "NSButtonCell"; title = "LegacyOverwrite"; ObjectID = "Hrg-If-vgt"; */
"Hrg-If-vgt.title" = "LegacyOverwrite";

/* Class = "NSTableColumn"; headerCell.title = "UUID"; ObjectID = "Lmb-kn-JbT"; */
"Lmb-kn-JbT.headerCell.title" = "UUID";

/* Class = "NSBox"; title = "Box"; ObjectID = "NoT-Wv-Hn9"; */
"NoT-Wv-Hn9.title" = "Box";

/* Class = "NSButtonCell"; title = "LegacyEnable"; ObjectID = "ORI-69-MG3"; */
"ORI-69-MG3.title" = "LegacyEnable";

/* Class = "NSView"; ibShadowedToolTip = "3. LegacySchema\nType: plist dict\nDescription: Allows setting select NVRAM variables from a map (plist dict) of GUIDs to an array (plist array) of variable names in plist string format.\nYou can use * value to accept all variables for select GUID.\nWARNING: Choose variables very carefully, as nvram.plist is not vaulted. For instance, do not put boot-args or csr-active-config, as this can bypass SIP.\nTo read NVRAM variable value from macOS one could use nvram by concatenating variable GUID and name separated by : symbol. For example, nvram 7C436110-AB2A-4BBB-A880-FE41995C9F82:boot-args.\nA continuously updated variable list can be found in a corresponding document: NVRAM Variables.\n\nWARNING: Choose variables very carefully, as nvram.plist is not vaulted. For instance, do not put boot-args\nor csr-active-config, as this can bypass SIP."; ObjectID = "cVF-o8-z0z"; */
"cVF-o8-z0z.ibShadowedToolTip" = "3. LegacySchema\nType: plist dict\nDescription: Allows setting select NVRAM variables from a map (plist dict) of GUIDs to an array (plist array) of variable names in plist string format.\nYou can use * value to accept all variables for select GUID.\nWARNING: Choose variables very carefully, as nvram.plist is not vaulted. For instance, do not put boot-args or csr-active-config, as this can bypass SIP.\nTo read NVRAM variable value from macOS one could use nvram by concatenating variable GUID and name separated by : symbol. For example, nvram 7C436110-AB2A-4BBB-A880-FE41995C9F82:boot-args.\nA continuously updated variable list can be found in a corresponding document: NVRAM Variables.\n\nWARNING: Choose variables very carefully, as nvram.plist is not vaulted. For instance, do not put boot-args\nor csr-active-config, as this can bypass SIP.";

/* Class = "NSTabViewItem"; label = "Block"; ObjectID = "dmH-cD-uzh"; */
"dmH-cD-uzh.label" = "Block";

/* Class = "NSTabViewItem"; label = "Add"; ObjectID = "eSY-j6-jWD"; */
"eSY-j6-jWD.label" = "Add";

/* Class = "NSTableColumn"; headerCell.title = "Key"; ObjectID = "ia9-0E-fQ8"; */
"ia9-0E-fQ8.headerCell.title" = "Key";

/* Class = "NSTableColumn"; headerCell.title = "Type"; ObjectID = "imy-5n-EEC"; */
"imy-5n-EEC.headerCell.title" = "Type";

/* Class = "NSTableColumn"; headerCell.title = "Key*"; ObjectID = "j1D-Eg-beZ"; */
"j1D-Eg-beZ.headerCell.title" = "Key*";

/* Class = "NSButtonCell"; title = "WriteFlash"; ObjectID = "oGQ-n7-FKX"; */
"oGQ-n7-FKX.title" = "WriteFlash";

/* Class = "NSTabViewItem"; label = "LegacySchema"; ObjectID = "oWw-vt-aiZ"; */
"oWw-vt-aiZ.label" = "LegacySchema";

/* Class = "NSTableColumn"; headerCell.title = "UUID"; ObjectID = "olA-O6-ChW"; */
"olA-O6-ChW.headerCell.title" = "UUID";

/* Class = "NSView"; ibShadowedToolTip = "2. Block\nType: plist dict\nDescription: Removes NVRAM variables from a map (plist dict) of GUIDs to an array (plist array) of variable names in plist string format.\nTo read NVRAM variable value from macOS one could use nvram by concatenating variable GUID and name separated by : symbol. For example, nvram 7C436110-AB2A-4BBB-A880-FE41995C9F82:boot-args.\nA continuously updated variable list can be found in a corresponding document: NVRAM Variables."; ObjectID = "ph9-2g-adH"; */
"ph9-2g-adH.ibShadowedToolTip" = "2. Block\nType: plist dict\nDescription: Removes NVRAM variables from a map (plist dict) of GUIDs to an array (plist array) of variable names in plist string format.\nTo read NVRAM variable value from macOS one could use nvram by concatenating variable GUID and name separated by : symbol. For example, nvram 7C436110-AB2A-4BBB-A880-FE41995C9F82:boot-args.\nA continuously updated variable list can be found in a corresponding document: NVRAM Variables.";

/* Class = "NSTableColumn"; headerCell.title = "UUID"; ObjectID = "rFf-nE-Twf"; */
"rFf-nE-Twf.headerCell.title" = "UUID";

/* Class = "NSTableView"; ibShadowedToolTip = "1. Add\nType: plist dict\nDescription: Sets NVRAM variables from a map (plist dict) of GUIDs to a map (plist dict) of variable names and their values in plist metadata format. GUIDs must be provided in canonic string format in upper or lower case (e.g. 8BE4DF61-93CA-11D2-AA0D-00E098032B8C).\nCreated variables get EFI_VARIABLE_BOOTSERVICE_ACCESS and EFI_VARIABLE_RUNTIME_ACCESS attributes set. Variables will only be set if not present and not blocked. To overwrite a variable add it to Block section. This approach enables to provide default values till the operating system takes the lead.\nNote: If plist key does not conform to GUID format, behaviour is undefined.\n\nMandatory Variables\nWarning: These variables may be added by PlatformNVRAM or Generic subsections of PlatformInfo section. Using PlatformInfo is the recommend way of setting these variables.\nThe following variables are mandatory for macOS functioning:\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:FirmwareFeatures\n32-bit FirmwareFeatures. Present on all Macs to avoid extra parsing of SMBIOS tables\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:FirmwareFeaturesMask\n32-bit FirmwareFeaturesMask. Present on all Macs to avoid extra parsing of SMBIOS tables.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:MLB\nBoardSerialNumber. Present on newer Macs (2013+ at least) to avoid extra parsing of SMBIOS tables, especially in boot.efi.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ROM\nPrimary network adapter MAC address or replacement value. Present on newer Macs (2013+ at least) to avoid accessing special memory region, especially in boot.efi.\n\nRecommended Variables\nThe following variables are recommended for faster startup or other improvements:\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:csr-active-config\n32-bit System Integrity Protection bitmask. Declared in XNU source code in csr.h.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ExtendedFirmwareFeatures\nCombined FirmwareFeatures and ExtendedFirmwareFeatures. Present on newer Macs to avoid extra parsing of SMBIOS tables\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ExtendedFirmwareFeaturesMask\nCombined FirmwareFeaturesMask and ExtendedFirmwareFeaturesMask. Present on newer Macs to avoid extra parsing of SMBIOS tables.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_BID\nHardware BoardProduct (e.g. Mac-35C1E88140C3E6CF). Not present on real Macs, but used to avoid extra parsing of SMBIOS tables, especially in boot.efi.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_MLB\nHardware BoardSerialNumber. Override for MLB. Present on newer Macs (2013+ at least).\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_ROM\nHardware ROM. Override for ROM. Present on newer Macs (2013+ at least).\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:prev-lang:kbd\nASCII string defining default keyboard layout. Format is lang-COUNTRY:keyboard, e.g. ru-RU:252 for Russian locale and ABC keyboard. Also accepts short forms: ru:252 or ru:0 (U.S. keyboard, compatible with 10.9). Full decoded keyboard list from AppleKeyboardLayouts-L.dat can be found here. Using non-latin keyboard on 10.14 will not enable ABC keyboard, unlike previous and subsequent macOS versions, and is thus not recommended in case you need 10.14.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:security-mode\nASCII string defining FireWire security mode. Legacy, can be found in IOFireWireFamily source code in IOFireWireController.cpp. It is recommended not to set this variable, which may speedup system startup. Setting to full is equivalent to not setting the variable and none disables FireWire security.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:UIScale\nOne-byte data defining boot.efi user interface scaling. Should be 01 for normal screens and 02 for HiDPI screens."; ObjectID = "s0e-p0-A6y"; */
"s0e-p0-A6y.ibShadowedToolTip" = "1. Add\nType: plist dict\nDescription: Sets NVRAM variables from a map (plist dict) of GUIDs to a map (plist dict) of variable names and their values in plist metadata format. GUIDs must be provided in canonic string format in upper or lower case (e.g. 8BE4DF61-93CA-11D2-AA0D-00E098032B8C).\nCreated variables get EFI_VARIABLE_BOOTSERVICE_ACCESS and EFI_VARIABLE_RUNTIME_ACCESS attributes set. Variables will only be set if not present and not blocked. To overwrite a variable add it to Block section. This approach enables to provide default values till the operating system takes the lead.\nNote: If plist key does not conform to GUID format, behaviour is undefined.\n\nMandatory Variables\nWarning: These variables may be added by PlatformNVRAM or Generic subsections of PlatformInfo section. Using PlatformInfo is the recommend way of setting these variables.\nThe following variables are mandatory for macOS functioning:\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:FirmwareFeatures\n32-bit FirmwareFeatures. Present on all Macs to avoid extra parsing of SMBIOS tables\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:FirmwareFeaturesMask\n32-bit FirmwareFeaturesMask. Present on all Macs to avoid extra parsing of SMBIOS tables.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:MLB\nBoardSerialNumber. Present on newer Macs (2013+ at least) to avoid extra parsing of SMBIOS tables, especially in boot.efi.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ROM\nPrimary network adapter MAC address or replacement value. Present on newer Macs (2013+ at least) to avoid accessing special memory region, especially in boot.efi.\n\nRecommended Variables\nThe following variables are recommended for faster startup or other improvements:\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:csr-active-config\n32-bit System Integrity Protection bitmask. Declared in XNU source code in csr.h.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ExtendedFirmwareFeatures\nCombined FirmwareFeatures and ExtendedFirmwareFeatures. Present on newer Macs to avoid extra parsing of SMBIOS tables\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:ExtendedFirmwareFeaturesMask\nCombined FirmwareFeaturesMask and ExtendedFirmwareFeaturesMask. Present on newer Macs to avoid extra parsing of SMBIOS tables.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_BID\nHardware BoardProduct (e.g. Mac-35C1E88140C3E6CF). Not present on real Macs, but used to avoid extra parsing of SMBIOS tables, especially in boot.efi.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_MLB\nHardware BoardSerialNumber. Override for MLB. Present on newer Macs (2013+ at least).\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:HW_ROM\nHardware ROM. Override for ROM. Present on newer Macs (2013+ at least).\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:prev-lang:kbd\nASCII string defining default keyboard layout. Format is lang-COUNTRY:keyboard, e.g. ru-RU:252 for Russian locale and ABC keyboard. Also accepts short forms: ru:252 or ru:0 (U.S. keyboard, compatible with 10.9). Full decoded keyboard list from AppleKeyboardLayouts-L.dat can be found here. Using non-latin keyboard on 10.14 will not enable ABC keyboard, unlike previous and subsequent macOS versions, and is thus not recommended in case you need 10.14.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:security-mode\nASCII string defining FireWire security mode. Legacy, can be found in IOFireWireFamily source code in IOFireWireController.cpp. It is recommended not to set this variable, which may speedup system startup. Setting to full is equivalent to not setting the variable and none disables FireWire security.\n• 4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14:UIScale\nOne-byte data defining boot.efi user interface scaling. Should be 01 for normal screens and 02 for HiDPI screens.";

/* Class = "NSTableView"; ibShadowedToolTip = "Other Variables\nThe following variables may be useful for certain configurations or troubleshooting:\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:boot-args\nKernel arguments, used to pass configuration to Apple kernel and drivers. There are many arguments, which may be found by looking for the use of PE_parse_boot_argn function in the kernel or driver code. Some of the known boot arguments include:\n– acpi_layer=0xFFFFFFFF\n– acpi_level=0xFFFF5F (implies ACPI_ALL_COMPONENTS)\n– batman=VALUE (AppleSmartBatteryManager debug mask)\n– batman-nosmc=1 (disable AppleSmartBatteryManager SMC interface)\n– cpus=VALUE (maximum number of CPUs used)\n– debug=VALUE (debug mask)\n– io=VALUE (IOKit debug mask)\n– keepsyms=1 (show panic log debug symbols)\n– kextlog=VALUE (kernel extension loading debug mask)\n– nv_disable=1 (disables NVIDIA GPU acceleration)\n– nvda_drv=1 (legacy way to enable NVIDIA web driver, removed in 10.12)\n– npci=0x2000 (legacy, disables kIOPCIConfiguratorPFM64)\n– lapic_dont_panic=1\n– slide=VALUE (manually set KASLR slide)\n– smcdebug=VALUE (AppleSMC debug mask)\n– -amd_no_dgpu_accel (alternative to WhateverGreen’s -radvesa for new GPUs)\n– -nehalem_error_disable\n– -no_compat_check (disable model checking)\n– -s (single mode)\n– -v (verbose mode)\n– -x (safe mode)\nThere are multiple external places summarising macOS argument lists: example 1, example 2.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:bootercfg\nBooter arguments, similar to boot-args but for boot.efi. Accepts a set of arguments, which are hexadeci- mal 64-bit values with or without 0x prefix primarily for logging control:\n– log=VALUE\n∗ 1 — AppleLoggingConOutOrErrSet/AppleLoggingConOutOrErrPrint (classical ConOut/StdErr)\n∗ 2 — AppleLoggingStdErrSet/AppleLoggingStdErrPrint (StdErr or serial?)\n∗ 4 — AppleLoggingFileSet/AppleLoggingFilePrint (BOOTER.LOG/BOOTER.OLD file on EFI partition)\n– debug=VALUE\n∗ 1 — enables print something to BOOTER.LOG (stripped code implies there may be a crash)\n∗ 2 — enables perf logging to /efi/debug-log in the device three\n∗ 4 — enables timestamp printing for styled printf calls\n– level=VALUE — Verbosity level of DEBUG output. Everything but 0x80000000 is stripped from the binary, and this is the default value.\n– kc-read-size=VALUE — Chunk size used for buffered I/O from network or disk for prelinkedkernel reading and related. Set to 1MB (0x100000) by default, can be tuned for faster booting.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:bootercfg-once\nBooter arguments override removed after first launch. Otherwise equivalent to bootercfg.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:fmm-computer-name Current saved host name. ASCII string.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:nvda_drv\nNVIDIA Web Driver control variable. Takes ASCII digit 1 or 0 to enable or disable installed driver."; ObjectID = "tq7-BQ-JU5"; */
"tq7-BQ-JU5.ibShadowedToolTip" = "Other Variables\nThe following variables may be useful for certain configurations or troubleshooting:\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:boot-args\nKernel arguments, used to pass configuration to Apple kernel and drivers. There are many arguments, which may be found by looking for the use of PE_parse_boot_argn function in the kernel or driver code. Some of the known boot arguments include:\n– acpi_layer=0xFFFFFFFF\n– acpi_level=0xFFFF5F (implies ACPI_ALL_COMPONENTS)\n– batman=VALUE (AppleSmartBatteryManager debug mask)\n– batman-nosmc=1 (disable AppleSmartBatteryManager SMC interface)\n– cpus=VALUE (maximum number of CPUs used)\n– debug=VALUE (debug mask)\n– io=VALUE (IOKit debug mask)\n– keepsyms=1 (show panic log debug symbols)\n– kextlog=VALUE (kernel extension loading debug mask)\n– nv_disable=1 (disables NVIDIA GPU acceleration)\n– nvda_drv=1 (legacy way to enable NVIDIA web driver, removed in 10.12)\n– npci=0x2000 (legacy, disables kIOPCIConfiguratorPFM64)\n– lapic_dont_panic=1\n– slide=VALUE (manually set KASLR slide)\n– smcdebug=VALUE (AppleSMC debug mask)\n– -amd_no_dgpu_accel (alternative to WhateverGreen’s -radvesa for new GPUs)\n– -nehalem_error_disable\n– -no_compat_check (disable model checking)\n– -s (single mode)\n– -v (verbose mode)\n– -x (safe mode)\nThere are multiple external places summarising macOS argument lists: example 1, example 2.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:bootercfg\nBooter arguments, similar to boot-args but for boot.efi. Accepts a set of arguments, which are hexadeci- mal 64-bit values with or without 0x prefix primarily for logging control:\n– log=VALUE\n∗ 1 — AppleLoggingConOutOrErrSet/AppleLoggingConOutOrErrPrint (classical ConOut/StdErr)\n∗ 2 — AppleLoggingStdErrSet/AppleLoggingStdErrPrint (StdErr or serial?)\n∗ 4 — AppleLoggingFileSet/AppleLoggingFilePrint (BOOTER.LOG/BOOTER.OLD file on EFI partition)\n– debug=VALUE\n∗ 1 — enables print something to BOOTER.LOG (stripped code implies there may be a crash)\n∗ 2 — enables perf logging to /efi/debug-log in the device three\n∗ 4 — enables timestamp printing for styled printf calls\n– level=VALUE — Verbosity level of DEBUG output. Everything but 0x80000000 is stripped from the binary, and this is the default value.\n– kc-read-size=VALUE — Chunk size used for buffered I/O from network or disk for prelinkedkernel reading and related. Set to 1MB (0x100000) by default, can be tuned for faster booting.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:bootercfg-once\nBooter arguments override removed after first launch. Otherwise equivalent to bootercfg.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:fmm-computer-name Current saved host name. ASCII string.\n• 7C436110-AB2A-4BBB-A880-FE41995C9F82:nvda_drv\nNVIDIA Web Driver control variable. Takes ASCII digit 1 or 0 to enable or disable installed driver.";
